using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

public class GenerateObjects : MonoBehaviour {
    static string PATH_TO_PREFAB_INTERACTIVE = "Assets/Mine/Prefab-Interactive/";
    static string PATH_TO_CUBE07 = PATH_TO_PREFAB_INTERACTIVE + "cube .07.asset";
    static int CUBE07_COUNT = 10;
    static int SPHERE_COUNT = 1;
    static List <float> sizeList = new List<float>() { .15f, .25f, .2f };

    // Use this for initialization
    void GenerateCubeDeprecated() {
        List<GameObject> cubes07 = new List<GameObject>();
        for (int i = 0; i < CUBE07_COUNT; i++) {
            cubes07.Add(GameObject.CreatePrimitive(PrimitiveType.Cube));
        }
        foreach (GameObject cube07 in cubes07) {
            CubeDisplay displayScript = cube07.AddComponent<CubeDisplay>() as CubeDisplay;
            displayScript.cube = (Cube)AssetDatabase.LoadAssetAtPath(PATH_TO_CUBE07, typeof(Cube));
        }
    }

    void GenerateSphere() {
        // List<gObj> is the number of prefabs generated by ONE scriptable Objects
        // List<List<>> is list of scriptable objects (e.g. all the scriptable cube objs)

        List<List<GameObject>> spheresList = new List<List<GameObject>>();
        for (int i = 0; i < sizeList.Count; i++) {
            spheresList.Add(new List<GameObject>());
            for (int sphereObjCounter = 0; sphereObjCounter < SPHERE_COUNT; sphereObjCounter++) {
                spheresList[i].Add(GameObject.CreatePrimitive(PrimitiveType.Sphere));
            }

            foreach (GameObject sphere in spheresList[i]) {
                SphereDisplay displayScript = sphere.AddComponent<SphereDisplay>() as SphereDisplay;
                displayScript.sphere = (Sphere)AssetDatabase.LoadAssetAtPath(PATH_TO_PREFAB_INTERACTIVE + "Sphere " + sizeList[i] + ".asset", typeof(Sphere));
            }

        }
    }

    void GenerateCube() {
        // List<gObj> is the number of prefabs generated by ONE scriptable Objects
        // List<List<>> is list of scriptable objects (e.g. all the scriptable cube objs)

        List<List<GameObject>> cubesList = new List<List<GameObject>>();
        for (int i = 0; i < sizeList.Count; i++) {
            cubesList.Add(new List<GameObject>());
            for (int cubeObjCounter = 0; cubeObjCounter < SPHERE_COUNT; cubeObjCounter++) {
                cubesList[i].Add(GameObject.CreatePrimitive(PrimitiveType.Cube));
            }

            foreach (GameObject cube in cubesList[i]) {
                CubeDisplay displayScript = cube.AddComponent<CubeDisplay>() as CubeDisplay;
                displayScript.cube = (Cube)AssetDatabase.LoadAssetAtPath(PATH_TO_PREFAB_INTERACTIVE + "Cube " + sizeList[i] + ".asset", typeof(Cube));
            }

        }
    }

    void GenerateCylinder() {
        // List<gObj> is the number of prefabs generated by ONE scriptable Objects
        // List<List<>> is list of scriptable objects (e.g. all the scriptable cylinder objs)

        List<List<GameObject>> cylindersList = new List<List<GameObject>>();
        for (int i = 0; i < sizeList.Count; i++) {
            cylindersList.Add(new List<GameObject>());
            for (int cylinderObjCounter = 0; cylinderObjCounter < SPHERE_COUNT; cylinderObjCounter++) {
                cylindersList[i].Add(GameObject.CreatePrimitive(PrimitiveType.Cylinder));
            }

            foreach (GameObject cylinder in cylindersList[i]) {
                CylinderDisplay displayScript = cylinder.AddComponent<CylinderDisplay>() as CylinderDisplay;
                displayScript.cylinder = (Cylinder)AssetDatabase.LoadAssetAtPath(PATH_TO_PREFAB_INTERACTIVE + "Cylinder " + sizeList[i] + ".asset", typeof(Cylinder));
                //displayScript.setPosition(new Vector3(0, 30f, 0));
                if (i==2) displayScript.setIsInteractive(false);
            }

        }
    }

    void Start() {
        // CreateScriptableObjects.CreateAsset();
        //GenerateSphere();
        //GenerateCube();
        GenerateCylinder();
    }
}



//using System.Collections;
//using System.Collections.Generic;
//using UnityEditor;
//using UnityEngine;

//public class GenerateObjects : MonoBehaviour {
//    static string PATH_TO_SCRIPT = "Assets/Mine/Script/";
//    static string PATH_TO_PREFAB_INTERACTIVE = "Assets/Mine/Prefab-Interactive/";
//    static string PATH_TO_CUBE007 = PATH_TO_PREFAB_INTERACTIVE + "cube .07.asset";
//    static int CUBE007_COUNT = 10;
//    static Dictionary<PrimitiveType, KeyValuePair<System.Type, System.Type>> SCRIPT_OBJECT_DICT = new Dictionary<PrimitiveType, KeyValuePair<System.Type, System.Type>>
//    {
//        { PrimitiveType.Cube, new KeyValuePair<System.Type, System.Type>(typeof(Cube), typeof(CubeDisplay)) },
//        { PrimitiveType.Sphere, new KeyValuePair<System.Type, System.Type>(typeof(Sphere), typeof(SphereDisplay)) },
//        { PrimitiveType.Cylinder, new KeyValuePair<System.Type, System.Type>(typeof(Cylinder), typeof(CylinderDisplay)) }
//    };


//    System.Type getObjectType(PrimitiveType primitiType) {
//        return SCRIPT_OBJECT_DICT[primitiType].Key;
//    }

//    System.Type getObjectDisplayScript(PrimitiveType primitiType) {
//        return SCRIPT_OBJECT_DICT[primitiType].Value;
//    }

//    //void GenerateAddPrimitiveDisplay(List<GameObject> objectList, int objectCount, PrimitiveType primiType, string pathToAssetData) {
//    //    for (int i = 0; i < objectCount; i++) {
//    //        objectList.Add(GameObject.CreatePrimitive(primiType));
//    //    }

//    //    foreach (GameObject obj in objectList) {
//    //        CubeDisplay displayScript = obj.AddComponent<CubeDisplay>() as CubeDisplay;
//    //        displayScript = (CubeDisplay)AssetDatabase.LoadAssetAtPath(PATH_TO_CUBE007, typeof(CubeDisplay));
//    //    }
//    //}

//    void GenerateAddPrimitiveDisplay(List<GameObject> objectList, int objectCount, PrimitiveType primiType, string pathToAssetData) {
//        System.Type type = getObjectType(primiType);
//        System.Type tScript = getObjectDisplayScript(primiType);
//        for (int i = 0; i < objectCount; i++) {
//            objectList.Add(GameObject.CreatePrimitive(primiType));
//        }

//        foreach (GameObject obj in objectList) {
//            tScript.GetType() displayScript = obj.AddComponent<tScript.GetType()>() as tScript.GetType();
//            displayScript.obj = (type)AssetDatabase.LoadAssetAtPath(pathToAssetData, typeof(type.GetType()));
//        }
//    }

//    // Use this for initialization
//    void Start() {
//        List<GameObject> cubes007 = new List<GameObject>();
//        List<GameObject> cubes010 = new List<GameObject>();
//        GenerateAddPrimitiveDisplay(cubes007, CUBE007_COUNT, PrimitiveType.Cube, PATH_TO_CUBE007);



//    }
//}
